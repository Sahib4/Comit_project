{"ast":null,"code":"import Axios from 'axios';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_FAIL, USER_DETAILS_SUCCESS, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\";\nexport const signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post('/api/users/signin', {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post('/api/users/register', {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const signout = dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('cartItems');\n  localStorage.removeItem('shippingAddress');\n  dispatch({\n    type: USER_SIGNOUT\n  });\n};\nexport const detailsUser = userId => async (dispatch, getState) => {\n  dispatch({\n    type: USER_DETAILS_REQUEST,\n    payload: userId\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/users/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  dispatch({\n    type: USER_UPDATE_PROFILE_REQUEST,\n    payload: user\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.put(`/api/users/profile`, user, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/sahib_narang/Documents/comit-project/project/projectFront/src/actions/userActions.js"],"names":["Axios","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_FAIL","USER_DETAILS_SUCCESS","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_SUCCESS","signin","email","password","dispatch","type","payload","data","post","localStorage","setItem","JSON","stringify","error","response","message","register","name","signout","removeItem","detailsUser","userId","getState","userSignin","userInfo","get","headers","Authorization","token","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL,USER_DETAILS_REQUEST,USER_DETAILS_FAIL,USER_DETAILS_SUCCESS, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_SUCCESS } from \"../constants/userConstants\";\n\n\nexport const signin = (email, password) => async (dispatch) => {\n    dispatch({type: USER_SIGNIN_REQUEST, payload:{email,password}});\n\n    try {\n        const { data } = await Axios.post('/api/users/signin', { email, password });\n        dispatch ({type:USER_SIGNIN_SUCCESS,payload:data});\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch(error) {\n        dispatch({\n            type:USER_SIGNIN_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        });\n}\n};\n\nexport const register = (name, email, password) => async (dispatch) => {\n    dispatch({type: USER_REGISTER_REQUEST, payload:{email,password}});\n\n    try {\n        const { data } = await Axios.post('/api/users/register', { name,email, password });\n        dispatch ({type:USER_REGISTER_SUCCESS,payload:data});\n        dispatch ({type:USER_SIGNIN_SUCCESS,payload:data});\n        localStorage.setItem('userInfo', JSON.stringify(data));\n    } catch(error) {\n        dispatch({\n            type:USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\n        });\n}\n};\n\nexport const signout = (dispatch) => {\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('cartItems');\n    localStorage.removeItem('shippingAddress');\n    dispatch({ type: USER_SIGNOUT });\n};\n\nexport const detailsUser = (userId) => async (dispatch, getState) => {\n    dispatch({ type: USER_DETAILS_REQUEST, payload: userId });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    try {\n      const { data } = await Axios.get(`/api/users/${userId}`, {\n        headers: { Authorization: `Bearer ${userInfo.token}` },\n      });\n      dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: USER_DETAILS_FAIL, payload: message });\n    }\n  };\n\n  export const updateUserProfile = (user) => async(dispatch, getState) => {\n    dispatch({type: USER_UPDATE_PROFILE_REQUEST, payload: user});\n    const {userSignin: {userInfo}} = getState();\n    try{\n      const {data} = await Axios.put(`/api/users/profile`, user,{\n        headers: {Authorization: `Bearer ${userInfo.token}`},\n      });\n      dispatch({type:USER_UPDATE_PROFILE_SUCCESS, payload: data});\n    }catch(error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({type: USER_UPDATE_PROFILE_FAIL, payload: message})\n    }\n  }"]},"metadata":{},"sourceType":"module"}